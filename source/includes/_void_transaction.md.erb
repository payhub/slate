# Void Transaction
<%= partial "includes/void_transaction_samples" %>
## Introduction

Run a Void when you need to cancel a transaction (either a sale or a refund) that has not yet been settled and that has not already been voided. This will avoid the customer being charged any amount at all and will release the pending funds, given the issuer supports doing so.

### Endpoint (URL to Call):

`POST https://api.payhub.com/v2/api/void`

## Elements

### merchant

Key | Type | Value
--- | ---- | -----
organization_id | integer | The Organization Id of the Merchant. This must match the Organization Id of the Merchant that the passed Oauth Token is associated with.
terminal_id | integer | The Merchant's Virtual Terminal Id for 3rd Party API.

### Transaction
Key | Type | Value
--- | ---- | -----
transaction_id | string | The Transaction Id to be voided.


<h2 id="response" style="clear: right;">Response</h2>
<%= partial "includes/void_transaction_result" %>

###Result
* A 201 code (created)
* The Id of the Void will be provided in the Location header that is returned. This is referred as the Transaction Id.
    <br>Sample header in the response: `Location ? https:// [payhub-api-server]:8251/payhubws/api/void/5501b651da06a879ce520d4d`.
    <br>If you do a GET request to this URL, you will get all the transaction information in JSON format.

On the same way you  can query about merchant, customer, bill and card data details using the given URLs.

**Note:** You will need to use Oauth token in the header request for sales or any other transaction. For more information, see the <br> [OAuth 2.0 Access Tokens](#authentication) section.

## Extended Methods
### Request Method

`GET`

### Endpoints (URLs to Call)

`GET https://api.payhub.com/api/v2/void/{id}` <br>
Use the Void Id in order to get the information of the Void response.

`GET https://api.payhub.com/api/v2/void/{id}/merchant` <br>
Use the Void Id in order to get the merchant information of the Void response.

`GET https://api.payhub.com/api/v2/void/` <br>
If the ID is not present, you will get a list with all the transactions.<br>
By default, the list return only the first 20 resutls and it can be paged, you can modify this by adding the next parameters to the url:

`page={pageNo}&size={size}`

## SDKs Methods

### Each SDK has a transaction manager class with the next methods:

* Create a transaction: **doVoid**
* Get transaction information based on the transaction ID: **getVoidInformation({transactionId})**
* Get all the transactions performed under this method: **getAllVoidInformation** (optional parameters for page and size)

`The first two methods returns a VoidResponseInformation  object, the third method returns a list of VoidResponseInformation objects.` <br>
 `Each VoidResponseInformation has the next methods:` 

* getMerchantInformation()